{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","require","install","coreServer","mbBasics","type","message","config","nodes","createNode","this","_require","VMScript","logEnabled","internalDebugLog","serverAddress","serverPort","parseInt","responseDelay","ModbusFlexServer","delayUnit","unitId","minAddress","VM","splitAddress","name","funcGetCoil","compile","funcGetDiscreteInput","funcGetInputRegister","funcGetHoldingRegister","funcSetCoil","funcSetRegister","showErrors","verbose","buildMessage","msg","disableMsgOutput","payload","node","registers","slice","bufferFactor","send","coils","verboseLogging","alloc","settings","Buffer","registersBufferSize","coilsBufferSize","vector","vm","sandbox","run","startServer","modbusServer","ModbusRTU","ServerTCP","host","port","debug","unitID","err","error","on","close","_server","sock","stringify","address","remoteAddress","remotePort","setNodeStatusTo","showStatusActivities","setNodeDefaultStatus","writeToFlexServerMemory"],"mappings":"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","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020,2021 Klaus Landsdorf (https://bianco-royal.space/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const ModbusRTU = require('modbus-serial')\n  const coreServer = require('./core/modbus-server-core')\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const { VM, VMScript } = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = parseInt(config.unitId) || 1\n    this.minAddress = parseInt(config.minAddress) || 0\n    this.splitAddress = parseInt(config.splitAddress) || 10000\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferFactor = coreServer.bufferFactor\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * coreServer.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * coreServer.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: { node }\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n        }\n\n        if (!node.showStatusActivities) {\n          mbBasics.setNodeDefaultStatus(node)\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      if (coreServer.isValidMemoryMessage(msg)) {\n        coreServer.writeToFlexServerMemory(node, msg)\n        if (msg.payload.disableMsgOutput !== 1) {\n          node.send(buildMessage(msg))\n        }\n      } else {\n        if (node.showErrors) {\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\n        }\n        if (!msg.payload.disableMsgOutput) {\n          node.send(buildMessage(msg))\n        }\n      }\n    })\n\n    function buildMessage (msg) {\n      return [\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * coreServer.bufferFactor) },\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * coreServer.bufferFactor) },\n        { payload: 'request', type: 'message', message: msg }\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      if (node.modbusServer) {\n        node.modbusServer.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    internalDebugLog(err.message)\n  }\n}\n"]}